{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "getMerkleRoot",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "merkleRoot",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "_merkleProof",
						"type": "bytes32[]"
					}
				],
				"name": "verifyAddress",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "_merkleProof",
						"type": "bytes32[]"
					}
				],
				"name": "whitelistFunc",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A smart contract for managing a Merkle tree-based whitelist.",
			"kind": "dev",
			"methods": {
				"getMerkleRoot()": {
					"returns": {
						"_0": "The current Merkle root hash."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"verifyAddress(bytes32[])": {
					"params": {
						"_merkleProof": "The Merkle proof for the address."
					},
					"returns": {
						"_0": "A boolean indicating whether the proof is valid."
					}
				},
				"whitelistFunc(bytes32[])": {
					"details": "Reverts if the Merkle proof is invalid.",
					"params": {
						"_merkleProof": "The Merkle proof for the caller's address."
					}
				}
			},
			"title": "MerkleTreeFacet",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getMerkleRoot()": {
					"notice": "Get the current Merkle root hash."
				},
				"merkleRoot()": {
					"notice": "Merkle root hash for whitelist addresses"
				},
				"verifyAddress(bytes32[])": {
					"notice": "Verify a Merkle proof for an address."
				},
				"whitelistFunc(bytes32[])": {
					"notice": "Perform an operation using the whitelist. Requires a valid Merkle proof."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/facets/MerkleTreeFacet.sol": "MerkleTreeFacet"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
			"keccak256": "0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac",
			"license": "MIT",
			"urls": [
				"bzz-raw://85d9c87a481fe99fd28a146c205da0867ef7e1b7edbe0036abc86d2e64eb1f04",
				"dweb:/ipfs/QmR7m1zWQNfZHUKTtqnjoCjCBbNFcjCxV27rxf6iMfhVtG"
			]
		},
		"contracts/facets/MerkleTreeFacet.sol": {
			"keccak256": "0x26843d7bd747d14b1a28971caf98c88c20413849e360b35151fdeb0f1b1a749a",
			"license": "MIT",
			"urls": [
				"bzz-raw://2dd2f15bd1197bc9ec3cb946062d3945c7ee93e0c0931fcf4042bd7592e33859",
				"dweb:/ipfs/QmPYJR2U797oujt2SLPRGoKkePa4pEk5NsxFQDDEuvM94V"
			]
		}
	},
	"version": 1
}